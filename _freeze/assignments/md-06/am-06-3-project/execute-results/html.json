{
  "hash": "f9690179996358acf506926ab588d363",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Setup your capstone project repository\"\nexecute:\n  eval: false\n---\n\n\n\n## Step 1: Create a new repository on GitHub\n\n1. Open the GitHub Organisation for the course <https://github.com/rbtl-fs25>\n\n2. Create a new repository and name it: project-USERNAME`. [Replace USERNAME with your GitHub username]{.highlight-yellow}. Avoid using spaces.\n\n## Step 2: Setup folder structure\n\n1. Clone the project-USERNAME repository to Posit Cloud.\n\n2. Open your project-USERNAME repository on Posit Cloud.\n\n3. Create an `R` folder and inside the folder create a new file and save it as `01-data_download.R`.\n\n4. Create another file inside `R` and save it as `02-data_cleaning.R`.\n\n5. Create a `data` folder, and inside the folder create three sub-folders titled `raw`, `processed`, and `final`.\n\n6. Create a `docs` folder inside the root folder.\n\n7. Create a Quarto document inside `docs` and name it `index.qmd`.\n\n8. Add all files to a commit, commit the changes with a meaningful commit message, and push the changes to GitHub.\n\n::: {.callout-note}\n## Data download, cleaning, and analysis\n\nYou will use the `01-data_download.R` file to download your data from the Google Sheet that you have established for your capstone project. Use the `googlesheets4` package to access the data. Do not clean the data, but save it in the `data/raw` folder using the `write_csv()` function. Give the the a meaningful name that describes your project.\n\nYou will use the `02-data_cleaning.R` file to process your data into a state that is ready for analysis. Do not access the data from Google Drive, but rather use the `read_csv()` function to access your data from the `data/raw` folder. Save the processed, analysis-ready data in the `data/processed` folder using the `write_csv()` function. Again, give the file a meaningful name that describes your project.\n\nYou will use the `index.qmd` file to write your final report. This will be a Quarto document that will contain your analysis and visualizations. You will need to access the processed data from the `data/processed` folder using the `read_csv()` function. \n\nYou will save the data underlying each displayed summary table and visualization in the `data/final` folder. This requires that each visualization and table is generated from an object that is not further transformed before the code for the visualization or table is written. Use the `write_csv()` function to save the data underlying each visualization and table in the `data/final` folder. Give the files the name of the label you have chosen inside the code-chunk. See example below.\n\n:::\n\n\n\n::: {#tbl-gapminder-mean .cell tbl-cap='Mean values of life expectancy, GDP per capita, and population by continent'}\n\n````{.cell-code}\n```{{r}}\n#| label: tbl-gapminder-mean\n#| tbl-cap: \"Mean values of life expectancy, GDP per capita, and population by continent\"\n\n# load libraries -------------------------------------\n\nlibrary(gapminder)\nlibrary(tidyverse)\n\n# data analysis --------------------------------------\n\ngapminder_mean <- gapminder |> \n  pivot_longer(cols = c(lifeExp, gdpPercap, pop), \n               names_to = \"variable\",\n               values_to = \"value\") |> \n  group_by(continent, variable) |> \n  summarise(mean = mean(value),\n            n = n()) |> \n  pivot_wider(names_from = variable, \n              values_from = mean) \n\n# results display as table ---------------------------\n  \ngapminder_mean |> \n  knitr::kable(digits = 0)\n\n# save data underlying the table ----------------------\n\nwrite_csv(here::here(\"data/final/tbl-gapminder-mean.csv\"))\n```\n````\n:::\n\n\n\n## Step 3: Create a `README.md` \n\n1. Navigate to the Files tab in the bottom right window of RStudio.\n\n2. Open the `data/processed` folder.\n\n3. Click on the \"Blank File\" button to create a new file.\n\n4. Select the option \"Text file\".\n\n5. Enter the name \"README.md\" in field and click OK.\n\n6. Go to: <https://raw.githubusercontent.com/rbtl-dev/metadata-readme-template/main/README.md>\n\n7. Copy the content that's displayed in your browser and paste it into the `README.md` file you have just created.\n\n8. Add all files to a commit, commit the changes with a meaningful commit message, and push the changes to GitHub.\n\n\n## Step 4: Create a data dictionary\n\n1. Open the following link to a Google Drive folder: <https://drive.google.com/drive/u/0/folders/1MIF7z_nzHPurn719cVulZDWBGMjbFYCo>\n\n2. Open the `capstone-project` folder.\n\n3. Create a new folder and use your GitHub username as the name of the folder.\n\n4. Enter your folder.\n\n5. Create a new spreadsheet and name it `dictionary`.\n\n6. Add two column names to the spreadsheet: `variable_name` and `description`.\n\n::: {.callout-note}\n## Data dictionary\nThis data dictionary will be used for your processed, analysis-ready data in `data/processed`. You will need to describe each variable in your dataset. The `variable_name` column should contain the name of the variable in your dataset, and the `description` column should contain a description of the variable. One sentence per variable without a comma `,`. \n\nOnce you completed your dictionary, you will need to download it as a `.csv` file and add it to your `data/processed` folder in your project-USERNAME repository. You can do that by:\n\n- Using the upload button in the Files tab in RStudio on Posit Cloud.\n- Opening the `data/processed` folder on your project-USERNAME repository on GitHub and uploading the file there. If you do this, then you need to pull the changes to your local repository on Posit Cloud.\n:::\n\n## Step 5: Submit homework assignment\n\n1. Add all files to the commit, commit the changes with a meaningful commit message, and push the changes to GitHub.\n2. Open an issue on GitHub on your project-USERNAME repo and tag the course instructor `@larnsce`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}