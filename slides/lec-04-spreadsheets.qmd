---
title: "{{< var md-04.title >}}"
subtitle: "{{< var course.long-title >}}"
author: "{{< var author >}}"
date: "2025-03-13"
format: 
  revealjs: 
    theme: "../style/slides.scss"
    transition: fade
    slide-number: true
    chalkboard: true
footer: "[{{< fa link >}} {{< var course.site-short >}}]({{< var course.site >}})"
editor: source
execute:
  freeze: auto
params:
    module: 4
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(countdown)
library(ggplot2)
library(readr)
library(dplyr)
library(gapminder)
library(epoxy)
library(ggthemes)
library(gt)
library(tidyr)
library(stringr)
library(readxl)
```

```{r}
sanitation <- read_csv(
  "https://raw.githubusercontent.com/rbtl-dev/md-03-assignments/main/data/jmp_wld_sanitation_long.csv"
)

codebook_long <- read_csv(
  "https://raw.githubusercontent.com/WASHNote/jmpwashdata/main/data-raw/codebook/jmp_codebook_estimate_long.csv"
)
```

## Learning Objectives (for this module)

```{r}
#| label: learning-objectives

lobj <- readr::read_csv(here::here("data/tbl-01-rbtl-fs25-learning-objectives.csv")) |> 
  dplyr::filter(module == params$module) |>
  dplyr::pull(learning_objectives)

```

```{epoxy}
{1:length(lobj)}. {lobj[1:length(lobj)]}
```

# Homework module 3 {background-color="#4C326A"}

## Task 3: Data for a country of your choice {.smaller}

-   for a country of your choice
-   for the year 2000 and 2020
-   for all variables that are not "safely managed sanitation services"

## Task 3: Data for a country of your choice {.smaller}

::: columns
::: {.column width="50%"}
-   {{< fa square-check >}} [for the country you live or work in]{.highlight-yellow}
-   {{< fa square-check >}} for the year 2000 and 2020
-   {{< fa square-check >}} [for all variables that are not "safely managed sanitation services"]{.highlight-yellow}
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "2,4"
sanitation_uga <- sanitation |> 
  filter(iso3 == "UGA",
         year %in% c(2000, 2020), 
         varname_short != "san_sm")
```

:::
:::

## Task 3: Data for a country of your choice {.smaller}

::: columns
::: {.column width="50%"}
-   {{< fa square-check >}} for the country you live or work in
-   {{< fa square-check >}} [for the year 2000 and 2020]{.highlight-yellow}
-   {{< fa square-check >}} for all variables that are not "safely managed sanitation services"
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "3"
sanitation_uga <- sanitation |> 
  filter(iso3 == "UGA",
         year %in% c(2000, 2020), 
         varname_short != "san_sm")
```

:::
:::

## Task 3: Data for a country of your choice {.smaller}

::: columns
::: {.column width="50%"}
-   {{< fa square-check >}} for the country you live or work in
-   {{< fa square-check >}} [for the year 2000 and 2020]{.highlight-yellow}
-   {{< fa square-check >}} for all variables that are not "safely managed sanitation services"
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "3"
sanitation_uga <- sanitation |> 
  filter(iso3 == "UGA",
         year == 2000 | year == 2020, 
         varname_short != "san_sm")
```

<n> <n>

```{r}
#| eval: false
#| echo: true
sanitation_uga |> 
  count(iso3, year, varname_short)
```

<n>

```{r}
#| eval: true
#| echo: false
sanitation_uga |> 
  count(iso3, year, varname_short) |> 
  gt() |> 
  # use gt to format variables in bold
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  )

```
:::
:::

## Task 3: Data for a country of your choice {.smaller}

::: columns
::: {.column width="50%"}
-   {{< fa square-check >}} for the country you live or work in
-   {{< fa rectangle-xmark >}} [for the year 2000 and 2020]{.highlight-yellow}
-   {{< fa square-check >}} for all variables that are not "safely managed sanitation services"
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "3"
sanitation_uga <- sanitation |> 
  filter(iso3 == "UGA",
         year == 2000, year == 2020, 
         varname_short != "san_sm")
```

<n> <n>

```{r}
#| eval: false
#| echo: true
sanitation_uga |> 
  count(iso3, year, varname_short)
```

<n>

```{r}
#| eval: true
#| echo: false
sanitation_uga |> 
  count(iso3, year, varname_short) |> 
  gt() |> 
  # use gt to format variables in bold
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  )

```

<n>

```{r}
#| eval: true
#| echo: false
sanitation_uga |> 
  count(iso3, year, varname_short)
```

-   One row cannot have two values (2000 and 2020) for the same variable
-   One year cannot 2000 & 2020 at the same time
-   One year is either 2000 or 2020
:::
:::

## Task 5 & 6: Make a plot & inspect it {.smaller}

```{r}
sanitation_uga <- sanitation |> 
  filter(iso3 == "UGA",
         year == 2000 | year == 2020, 
         varname_short != "san_sm")
```

::: small
1.  Look at the plot that you created. What do you notice about the order of the bars / order of the legend?
2.  What would you want to change?
3.  Why did we remove "safely managed sanitation services" from the data set in Task 3?
:::

```{r}
#| fig.width: 7
#| fig.asp: 0.618
ggplot(data = sanitation_uga,
       mapping = aes(x = residence, 
                     y = percent, 
                     fill = varname_long)) +
  geom_col() +
  facet_wrap(~year) +
  scale_fill_colorblind() +
  geom_text(aes(label = round(percent, 1)), 
            position = position_stack(vjust = 0.5),
            size = 3,
            color = "white") 
```


## Task 5 & 6: Make a plot & inspect it {.smaller}

::: small
1.  Look at the plot that you created. What do you notice about the order of the bars / order of the legend? [alphabetical order]{.highlight-yellow}
2.  What would you want to change? [put in order of the "sanitation ladder"]{.highlight-yellow}
3.  Why did we remove "safely managed sanitation services" from the data set in Task 3? 
:::

```{r}
#| fig.width: 7
#| fig.asp: 0.618
ggplot(data = sanitation_uga,
       mapping = aes(x = residence, 
                     y = percent, 
                     fill = varname_long)) +
  geom_col() +
  facet_wrap(~year) +
  scale_fill_colorblind() +
  geom_text(aes(label = round(percent, 1)), 
            position = position_stack(vjust = 0.5),
            size = 3,
            color = "white") 
```

## Sanitation ladder?

```{r}

levels_varname_short <- c("san_od", "san_unimp", "san_lim", "san_bas", "san_sm")

levels_varname_long <- c("no sanitation facilities", 
                         "unimproved sanitation facilities", 
                         "limited sanitation services", 
                         "basic sanitation services", 
                         "safely managed sanitation services")

codebook_long |> 
  select(varname_short, varname_long = object) |> 
  filter(varname_short %in% levels_varname_short) |> 
  mutate(varname_short = factor(varname_short, levels = levels_varname_short)) |> 
  mutate(simplified = c(
    "a decent toilet that's not shared",
    "a decent toilet that's shared",
    "an inadequate toilet",
    "no toilet",
    "a decent toilet that's not shared, and where pee & poo safely moved & treated"
  )) |> 
  arrange(desc(varname_short)) |>
  gt::gt() |> 
  # use gt to format variables in bold
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  ) |> 
  cols_align(align = "left", columns = everything())

```

## Task 5 & 6: Make a plot & inspect it {.smaller auto-animate="true"}

::: small
1.  Look at the plot that you created. What do you notice about the order of the bars / order of the legend? [alphabetical order]{.highlight-yellow}
2.  What would you want to change? [put in order of the "sanitation ladder"]{.highlight-yellow}
3.  Why did we remove "safely managed sanitation services" from the data set in Task 3?
:::

```{r}
sanitation_uga |> 
  mutate(varname_long = factor(varname_long, levels = levels_varname_long)) |>
  ggplot(mapping = aes(x = residence, 
                       y = percent, 
                       fill = varname_long)) +
  geom_col() +
  facet_wrap(~year) +
  scale_fill_colorblind() +
  geom_text(aes(label = round(percent, 1)), 
            position = position_stack(vjust = 0.5),
            size = 3,
            color = "white") 

```

## Task 5 & 6: Make a plot & inspect it {.smaller auto-animate="true"}

::: small
1.  Look at the plot that you created. What do you notice about the order of the bars / order of the legend? alphabetical order
2.  What would you want to change? put in order of the "sanitation ladder"
3.  Why did we remove "safely managed sanitation services" from the data set in Task 3? [because the total adds up to greater 100%, a fraction of people with basic services have safely managed services]{.highlight-yellow}
:::

```{r}
sanitation |> 
  filter(iso3 == "UGA",
         year == 2000 | year == 2020) |> 
  mutate(varname_long = factor(varname_long, levels = levels_varname_long)) |>
  ggplot(mapping = aes(x = residence, 
                       y = percent, 
                       fill = varname_long)) +
  geom_col() +
  facet_wrap(~year) +
  scale_fill_colorblind() +
  geom_text(aes(label = round(percent, 1)), 
            position = position_stack(vjust = 0.5),
            size = 3,
            color = "white") 

```

## Task 5 & 6: Make a plot & inspect it {.smaller auto-animate="true"}

::: small
1.  Look at the plot that you created. What do you notice about the order of the bars / order of the legend? alphabetical order
2.  What would you want to change? put in order of the "sanitation ladder"
3.  Why did we remove "safely managed sanitation services" from the data set in Task 3? [because the total adds up to greater 100%, a fraction of people with basic services have safely managed services]{.highlight-yellow}
:::

```{r}
sanitation_lvl <- sanitation |> 
  select(-varname_long) |> 
  pivot_wider(names_from = varname_short,
              values_from = percent) |> 
  mutate(san_bas = case_when(
    is.na(san_sm) == TRUE ~ san_bas,
    .default = san_bas - san_sm
  )) |> 
  pivot_longer(cols = san_bas:san_sm,
               names_to = "varname_short",
               values_to = "percent") |> 
  mutate(varname_short = factor(varname_short, levels = levels_varname_short)) |> 
  left_join(codebook_long, join_by("varname_short")) |> 
  mutate(varname_long = str_remove(object, " \\(.*\\)")) |> 
  relocate(varname_long, residence, .after = varname_short) |> 
  select(name:percent) |> 
  mutate(varname_long = factor(varname_long, levels = levels_varname_long),
         varname_short = factor(varname_short, levels = levels_varname_short),
         residence = factor(residence, levels = c("national", "rural", "urban"))
  )

sanitation_lvl |> 
  filter(iso3 == "UGA",
         year == 2000 | year == 2020) |> 
  mutate(varname_long = factor(varname_long, levels = levels_varname_long)) |>
  ggplot(mapping = aes(x = residence, 
                       y = percent, 
                       fill = varname_long)) +
  geom_col() +
  facet_wrap(~year) +
  scale_fill_colorblind() +
  geom_text(aes(label = round(percent, 1)), 
            position = position_stack(vjust = 0.5),
            size = 3,
            color = "white") 
```

## Types of variables - Remember?

::: columns
::: {.column width="50%"}
### numerical

**discrete variables**

-   non-negative
-   whole numbers
-   e.g. number of students, roll of a dice

**continuous variables**

-   infinite number of values
-   also dates and times
-   e.g. length, weight, size
:::

::: {.column width="50%"}
### non-numerical

[**categorical variables**]{.highlight-yellow}

-   finite number of values
-   distinct groups (e.g. EU countries, continents)
-   [**ordinal**]{.highlight-yellow} if levels have natural ordering (e.g. week days, school grades)
:::
:::

# Factors in R {background-color="#4C326A"}

## My turn: Factors in R

<br><br>

::: {.hand-purple-large style="text-align: center;"}
Sit back and enjoy!
:::

## Take a break

[Please get up and move!]{.highlight-yellow}

![](img/lec-04/pixel-art-tree.png){width="50%" fig-alt="This is the prompt generated by DALL-E 3 by OpenAI: A pixel art scene representing the concept of taking a break. The scene shows a serene outdoor setting with a clear blue sky. In the center, a small pixelated character is sitting comfortably on a bright green grassy hill, under the shade of a large, leafy tree. The character is depicted in a relaxed pose, perhaps sipping a warm beverage from a small cup. Nearby, a gentle stream flows, and a few fluffy white clouds drift in the sky. The overall mood of the image is peaceful and calming, emphasizing the tranquility of taking a break in nature."}

```{r}
countdown(minutes = 15)
```

::: footer
Image generated with [DALL-E 3 by OpenAI](https://openai.com/blog/dall-e/)
:::

## Your turn: md-04a-exercises - factors

::: task
1.  Open [posit.cloud](https://posit.cloud) in your browser (use your bookmark).
2.  Open the [rbtl-fs25 workspace]{.highlight-yellow} for the course.
3.  In the File Manager in the bottom right window, locate the [`md-04a-factors-your-turn.qmd`]{.highlight-yellow} file and click on it to open it in the top left window.
4.  Follow instructions in the file
:::

```{r}
countdown(25)
```

# Data import {background-color="#4C326A"}

## Reading rectangular data into R

::: columns
::: {.column width="50%"}
```{r echo=FALSE, out.width="80%"}
knitr::include_graphics("img/lec-04/readr.png")
```
:::

::: {.column width="50%"}
```{r echo=FALSE, out.width="80%"}
knitr::include_graphics("img/lec-04/readr.png")
```
:::
:::

## CSV & XLSX {.smaller}

::: columns
::: {.column width="50%"}
### readr

-   `read_csv()` - comma delimited files
-   `read_csv2()` - semicolon separated files (common in countries where , is used as the decimal place)
-   `read_tsv()` - tab delimited files
-   `read_delim()` - reads in files with any delimiter
-   ...
:::

::: {.column width="50%"}
### readxl

-   `read_excel()` - read xls or xlsx files
-   ...
:::
:::

## Reading data from CSV files {.smaller}

-   import unprocessed raw data

```{r}
#| echo: true
waste <- read_csv("data/raw/waste-city-level.csv")

waste
```

## Writing data as CSV files {.smaller}

-   transform data
-   export processed analysis-ready data

```{r}
#| echo: true

# data transformation
waste_sml <- waste |> 
  select(country_name, city_name, iso3c, income_id,
         total_msw_total_msw_generated_tons_year, 
         population_population_number_of_people) |> 
  rename(country = country_name,
         city = city_name,
         generation_tons_year = total_msw_total_msw_generated_tons_year,
         population = population_population_number_of_people)

# export processed analysis-ready data
write_csv(waste_sml, "data/processed/waste-city-level-sml.csv")
```

## Reading data from XLSX files {.smaller}

-   import unprocessed raw data

```{r}
#| echo: true
sludge <- read_excel("data/raw/tbl-01-faecal-sludge-analysis.xlsx",
                     sheet = 1)
sludge
```

## Writing data as CSV files {.smaller}

-   transform data
-   export data underlying a publication

```{r}
#| echo: true

# data transformation
tbl_sludge_summary <- sludge |> 
  filter(!is.na(users)) |> 
  group_by(system, location) |> 
  summarise(
    count = n(),
    mean_ts = mean(ts),
    sd_ts = sd(ts),
    median_ts = median(ts)
  ) 

# export data underlying a publication 
write_csv(tbl_sludge_summary, "data/final/tbl-01-faecal-sludge-summary.csv")

```

```{r}
tbl_sludge_summary |> 
  ungroup() |>  
  gt() |> 
  # use gt to format variables in bold
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels()
  ) |> 
  # format numbers to 1 decimal
  fmt_number(
    columns = vars(mean_ts, sd_ts, median_ts),
    decimals = 1
  ) 
  
```

## (Research) Data Management {.smaller}

| term                                    | folder    | explanation                                                                                                                                                           | file format                     |
|------------------|------------------|------------------|------------------|
| unprocessed [raw]{.highlight-yellow} data                | raw       | data that is not processed and [remains in its original form and file]{.highlight-yellow}                                                                                                  | often XLSX, also CSV and others |
| [processed]{.highlight-yellow} analysis-ready data       | processed | data that is processed to [prepare for an analysis]{.highlight-yellow} and is exported in its new form as a new file                                                                    | CSV                             |
| [final]{.highlight-yellow} data underlying a publication | final     | data that is the [result of an analysis]{.highlight-yellow} (e.g descriptive statistics or data visualization) and shown in a report, but then also exported in its new form as a new file | CSV                             |

: Examples of terms used when managing data. {.striped .hover tbl-colwidths="[20, 10, 50, 20]"}

## Take a break

[Please get up and move!]{.highlight-yellow}

![](img/lec-04/pixel-art-tree.png){width="50%" fig-alt="This is the prompt generated by DALL-E 3 by OpenAI: A pixel art scene representing the concept of taking a break. The scene shows a serene outdoor setting with a clear blue sky. In the center, a small pixelated character is sitting comfortably on a bright green grassy hill, under the shade of a large, leafy tree. The character is depicted in a relaxed pose, perhaps sipping a warm beverage from a small cup. Nearby, a gentle stream flows, and a few fluffy white clouds drift in the sky. The overall mood of the image is peaceful and calming, emphasizing the tranquility of taking a break in nature."}

```{r}
countdown(minutes = 15)
```

::: footer
Image generated with [DALL-E 3 by OpenAI](https://openai.com/blog/dall-e/)
:::


## Your turn: md-04a-exercises - import 

::: task
1.  Open [posit.cloud](https://posit.cloud) in your browser (use your bookmark).
2.  Open the [rbtl-fs25 workspace]{.highlight-yellow} for the course.
3.  In the File Manager in the bottom right window, locate the [`md-04b-import-your-turn.qmd`]{.highlight-yellow} file and click on it to open it in the top left window.
4.  Follow instructions in the file
:::

```{r}
countdown(20)
```

# Data Organization in Spreadsheets {background-color="#4C326A"}

## Data Organization in Spreadsheets


```{r}
knitr::include_graphics("img/lec-04/data-org-paper.png")
```

::: footer
[Screenshot taken on 2023-11-21](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989?src=)
:::

## Data Organization in Spreadsheets

Read the paper (it's part of your homework), but you can also:

- Go through the annotated slides: <https://kbroman.org/Talk_DataOrg/dataorg_notes.pdf>
- Watch Karl Broman give the talk (02:36 to 45:00): <https://youtu.be/t74E0a90gkA?t=156>
- Read the content on a website: <https://kbroman.org/dataorg/>

## Data Organization in Spreadsheets

But, especially apply it to your data

<div style="width:100%;height:0;padding-bottom:100%;position:relative;"><iframe src="https://giphy.com/embed/UEGwYCVTBFa9tJEf66" width="50%" height="50%" style="position:absolute" frameBorder="0" class="giphy-embed" allowFullScreen></iframe></div><p><a href="https://giphy.com/gifs/rainbow-computer-data-UEGwYCVTBFa9tJEf66">via GIPHY</a></p>

## Data Organization in Spreadsheets

Why? Because following a set of rules for organizing data everyone's live a little better. 

::: columns
::: {.column width="50%"}
```{r, out.width="100%"}
knitr::include_graphics("img/lec-04/data-org-views.png")
```
:::

::: {.column width="50%"}

- 3rd most viewed paper on The American Statistician
- 310'000+ views
- widely accepted as minimal standards

:::
:::



::: footer
Journal: The American Statistician, [Screenshot taken on 2023-11-21](https://www.tandfonline.com/action/showMostReadArticles?journalCode=utas20)
:::

## Data Organization in Spreadsheets

License? CC0 (!)

```{r, out.width="75%"}
knitr::include_graphics("img/lec-04/data-org-license.png")
```

::: footer
[Screenshot taken on 2022-03-23](https://github.com/kbroman/Talk_DataOrg)
:::

# Homework assignments module 4 {background-color="#4C326A"}

## Module 4 documentation

::: learn-more
[rbtl-fs25.github.io/website/modules/md-04.html](https://rbtl-fs25.github.io/website/modules/md-04.html)

```{=html}
<iframe src="https://rbtl-fs25.github.io/website/modules/md-04.html" width="100%" height="500" style="border:2px solid #123233;" title="Module 4 documentation"></iframe>
```
:::

## Homework due date

-   Homework assignment due: [Wednesday, March 19th]{.highlight-yellow}
-   Correction & feedback phase up to: Tuesday, March 25th

# Wrap-up {background-color="#4C326A"}

## Thanks! `r emo::ji("sunflower")`

Slides created via revealjs and Quarto: https://quarto.org/docs/presentations/revealjs/ 

Access slides as [PDF on GitHub](https://github.com/rbtl-fs25/website/raw/main/slides/lec-03-transformation.pdf)

All material is licensed under [Creative Commons Attribution Share Alike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/).
